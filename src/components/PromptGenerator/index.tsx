import React, { useCallback, useEffect, useState } from "react";
import styles from "./styles.module.css";

interface DocumentConfig {
	id: string;
	title: string;
	description: string;
	documents: string[];
}

const promptConfigs: DocumentConfig[] = [
	{
		id: "context",
		title: "üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π",
		description: "–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª–Ω—ã–º–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏",
		documents: [
			"01.standards.md",
			"02.methodology.md",
			"03.requirements_phase.md",
			"04.design_phase.md",
			"05.tasks_phase.md",
			"08.steering_documents.md",
		],
	},
	{
		id: "micro_context",
		title: "‚ö° –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∏–∫—Ä–æ-—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π",
		description: "–û–±–ª–µ–≥—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∏–∫—Ä–æ-—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π",
		documents: [
			"01.standards.md",
			"02.methodology.md",
			"06.micro_specification.md",
			"08.steering_documents.md",
		],
	},
	{
		id: "quick_context",
		title: "üöÄ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ã—Å—Ç—Ä–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π",
		description: "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π",
		documents: [
			"01.standards.md",
			"02.methodology.md",
			"07.quick_specification.md",
			"08.steering_documents.md",
		],
	},
	{
		id: "steering",
		title: "üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–µ–π",
		description: "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
		documents: [
			"01.standards.md",
			"02.methodology.md",
			"03.requirements_phase.md",
			"04.design_phase.md",
			"05.tasks_phase.md",
			"08.steering_documents.md",
		],
	},
];

export default function PromptGenerator() {
	const [selectedConfig, setSelectedConfig] = useState<DocumentConfig>(
		promptConfigs[0],
	);
	const [generatedContent, setGeneratedContent] = useState<string>("");
	const [isGenerating, setIsGenerating] = useState(false);

	const fetchPromptContent = useCallback(
		async (config: DocumentConfig): Promise<string> => {
			try {
				// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ docs/
				const documents = await Promise.all(
					config.documents.map(async (docName) => {
						try {
							const response = await fetch(`/docs/${docName}`);
							if (response.ok) {
								const content = await response.text();
								// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
								if (
									!content.includes("<!DOCTYPE html>") &&
									!content.includes("<html")
								) {
									return `# ${docName}\n\n${content}`;
								}
							}
							return `# ${docName}\n\n‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`;
						} catch (error) {
							console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${docName}:`, error);
							return `# ${docName}\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞`;
						}
					}),
				);

				const combinedContent = documents.join("\n\n---\n\n");
				return `# ${config.title}\n\n\`\`\`\`\`\`md\n${combinedContent}\n\`\`\`\`\`\``;
			} catch (error) {
				console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º—Ç–∞:", error);
				return `# ${config.title}\n\n\`\`\`\`\`\`md\n${config.description}\n\n–î–æ–∫—É–º–µ–Ω—Ç—ã, –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤ —ç—Ç–æ—Ç –ø—Ä–æ–º—Ç:\n${config.documents.map((doc) => `- ${doc}`).join("\n")}\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º—Ç–∞\n\`\`\`\`\`\``;
			}
		},
		[],
	);

	const generatePrompt = useCallback(
		async (config: DocumentConfig) => {
			setIsGenerating(true);
			try {
				// –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ docs/
				// –∏ –∏—Ö –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –æ–¥–∏–Ω –ø—Ä–æ–º—Ç
				const content = await fetchPromptContent(config);
				setGeneratedContent(content);
			} catch (error) {
				console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º—Ç–∞:", error);
			} finally {
				setIsGenerating(false);
			}
		},
		[fetchPromptContent],
	);

	const copyToClipboard = async () => {
		try {
			await navigator.clipboard.writeText(generatedContent);
			alert("–ü—Ä–æ–º—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!");
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
		}
	};

	const downloadPrompt = () => {
		const blob = new Blob([generatedContent], { type: "text/markdown" });
		const url = URL.createObjectURL(blob);
		const a = document.createElement("a");
		a.href = url;
		a.download = `${selectedConfig.id}.md`;
		document.body.appendChild(a);
		a.click();
		document.body.removeChild(a);
		URL.revokeObjectURL(url);
	};

	useEffect(() => {
		generatePrompt(selectedConfig);
	}, [selectedConfig, generatePrompt]);

	return (
		<div className={styles.promptGenerator}>
			<div className={styles.configSelector}>
				<h3>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º—Ç–∞:</h3>
				<div className={styles.configOptions}>
					{promptConfigs.map((config) => (
						<button
							key={config.id}
							type="button"
							className={`${styles.configOption} ${selectedConfig.id === config.id ? styles.active : ""}`}
							onClick={() => setSelectedConfig(config)}
						>
							<div className={styles.configTitle}>{config.title}</div>
							<div className={styles.configDescription}>
								{config.description}
							</div>
						</button>
					))}
				</div>
			</div>

			<div className={styles.selectedDocuments}>
				<h4>–í–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</h4>
				<ul>
					{selectedConfig.documents.map((doc) => (
						<li key={doc}>{doc}</li>
					))}
				</ul>
			</div>

			<div className={styles.generatedContent}>
				<div className={styles.contentHeader}>
					<h4>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º—Ç:</h4>
					<div className={styles.contentActions}>
						<button
							type="button"
							onClick={copyToClipboard}
							disabled={!generatedContent}
						>
							üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
						</button>
						<button
							type="button"
							onClick={downloadPrompt}
							disabled={!generatedContent}
						>
							üíæ –°–∫–∞—á–∞—Ç—å
						</button>
						<button
							type="button"
							onClick={() => generatePrompt(selectedConfig)}
							disabled={isGenerating}
						>
							{isGenerating ? "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é..." : "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"}
						</button>
					</div>
				</div>

				<div className={styles.contentPreview}>
					<pre>{generatedContent}</pre>
				</div>
			</div>
		</div>
	);
}
